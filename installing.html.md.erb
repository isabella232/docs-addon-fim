---
title: Installing the FIM Add-on for PCF
owner: Security Engineering
---

<strong><%= modified_date %></strong>

This topic describes how to install File Integrity Monitoring Add-on for PCF (FIM Add-on) on your Pivotal Cloud Foundry (PCF) deployment.

##<a id="prereqs"></a>Prerequisites

<p class="note"><strong>Note</strong>: FIM Add-on does not work on Windows.</p>

To complete the FIM installation:

* You must use named runtime configs.<br/><br/>

    If you have not already split your runtime config into multiple named files,
    do so before installing or upgrading the FIM Add-on.
    For general information about named runtime config files,
    see <a href="https://bosh.io/docs/configs.html">Generic Configs</a>.

* You must be a PCF operator with admin rights. 
See the [Understanding Pivotal Cloud Foundry User Types](https://docs.pivotal.io/pivotalcf/customizing/user-types.html#operator) topic for more information.

* You must have Pivotal Operations Manager (Ops Manager) v2.0 or later.

##<a id="create-mfest"></a>Create the FIM Manifest

The FIM runtime config is a YML file that contains runtime configuration information for the FIM Add-on.
Follow the steps below to create the FIM runtime config for your deployment:

1. Create a file named `fim.yml`, using the following code as a template.

    ```
    releases:
    - name: fim
      version: X.X.X
    addons:
    - name: fim
      jobs:
      - name: fim
        release: fim
        properties: {}
      include:
        stemcell:
        - os: ubuntu-trusty
        - os: ubuntu-xenial
    ```

2. (Optional) Set the properties `cpu_limit` and `enforce_cpu_limit`.
To use these properties, place the following text under the `fim` subsection of 
`fim.yml`, as shown below:
  
    ```
    ...
    properties:
      fim:
        cpu_limit: VALUE-OF-CPU-LIMIT
        enforce_cpu_limit: TRUE|FALSE
    ...
    ```
  <code><strong>cpu\_limit</strong></code>: <a name="cpu_limit"></a>
    <ul>
      <li>Limits FIM to a percentage of available CPU resources when other processes are using CPU resources. 
        Usage may exceed the limit if enough idle CPU cycles are available.</li>
      <li>Set to a whole number less than 100. 
        For example, set to <code>50</code> to limit FIM to 50% CPU usage when other 
        tasks are running.</li>
        <li>The default value is <code>10</code>.</li>
    </ul>

    <code><strong>enforce\_cpu\_limit</strong></code>: <a name="enforce_cpu_limit"></a>
    <ul>
      <li>When <code>true</code>, the limit set by <code>cpu\_limit</code> is always enforced.</li>
      <li>When <code>false</code>, the limit set by <code>cpu\_limit</code> is 
        only enforced when other processes are using CPU resources. 
        Usage may exceed the limit if enough idle CPU cycles are available.</li>
        <li>This property is <code>false</code> by default.</li>
    </ul>
    
    <p class="note warning"><strong>WARNING</strong>: If `enforce_cpu_limit` is set `true`,
    verify that `cpu_limit` is set high enough for FIM to execute normally. 
    If the limit is too strict, FIM fails to start.

##<a id="download"></a>Download the FIM Add-on  

To download the FIM Add-on software binary file and move it to your Ops Manager
virtual machine (VM), perform the steps below. If you intend to run the FIM
Add-on on a PCF deployment that includes services or components that use Ubuntu
Xenial stemcells, you should download FIM Add-on v1.2.22 or later.

<p class="note warning"><strong>WARNING! </strong> Ensure that you are using named runtime configs.
   For more information, see <a href="#prereqs">Prerequisites</a>.</p>

1. Download the FIM Add-on software binary from the 
[Pivotal Network](https://network.pivotal.io/products/p-fim-addon) to your local machine.

2. To copy the binary to your Ops Manager VM, run the following command:

    ```
    scp -i PATH-TO-PRIVATE-KEY fim-release.tgz ubuntu@YOUR-OPS-MANAGER-VM-IP:
    ```
    For example: 

    <pre class="terminal">$ scp -i ~/.ssh/my-key.pem fim-1.2.23.tar.gz ubuntu@192.168.0.2:</pre> 

3. To copy the FIM runtime config, `fim.yml` file, to your Ops Manager instance, run the following command:
 
    ```
    scp -i PATH-TO-PRIVATE-KEY fim.yml ubuntu@YOUR-OPS-MANAGER-VM-IP:
    ```
    
    For example:

    <pre class="terminal">$ scp -i ~/.ssh/my-key.pem fim.yml ubuntu@192.168.0.2:</pre>

4. SSH into the Ops Manager VM.
   For how to do this, see [SSH into Ops Manager](https://docs.pivotal.io/pivotalcf/customizing/trouble-advanced.html#ssh).

5. To navigate to the location of the binary on the Ops Manager VM, run the following command:
 
    ```
    cd PATH-TO-BINARY
    ```

    For example: 

    <pre class="terminal">$ cd ~</pre>

##<a id="deploy"></a> Deploy the FIM Add-on

Perform the following steps to deploy the FIM Add-on:

1. Upload your release, specifying the path to the tarballed FIM binary, by running the following command:

    ```
    bosh -e BOSH-ENVIRONMENT upload-release PATH-TO-NEW-FIM-RELEASE
    ```

    For example:

    <pre class="terminal">$ bosh -e my-env upload-release fim-1.2.23.tar.gz</pre>
    
1. <a name="update"></a>Update your runtime config to include the FIM Add-on,
   specifying the path to the `fim.yml` file you created above, by running the following command:

    ```
    bosh -e BOSH-ENVIRONMENT update-runtime-config --name=fim /tmp/fim.yml
    ```

    For example:

    <pre class="terminal">$ bosh -e my-env update-runtime-config --name=fim fim.yml</pre>
    
    <p class="note"><strong>Note</strong>: If you installed other BOSH add-ons,
    you must merge the FIM runtime config into your existing add-on runtime config. 
    Append the contents of <code>fim.yml</code> to your existing add-on YML file.</p>

1. Verify that your runtime config changes match what you specified in the manifest file.

    ```
    bosh -e BOSH-ENVIRONMENT runtime-config --name fim
    ```

    For example:
    <pre class="terminal">
    $ bosh -e my-env runtime-config --name=fim
    </pre>

    This command returns your updated FIM runtime config. For example:

    <pre class="terminal">
    Acting as user 'admin' on 'micro'
    releases:
    <span>-</span> name: fim
      version: 1.2.23
    addons:
      name: fim
        jobs:
        <span>-</span> name: fim
          release: fim
    ...
    </pre>

1. Navigate to the **Installation Dashboard** in Ops Manager.

1. If you are using Ops Manager v2.3 or later, click **Review Pending Changes**.
   For more information about this Ops Manager page, 
   see [Reviewing Pending Product Changes](https://docs.pivotal.io/pivotalcf/customizing/review-pending-changes.html).

1. Click **Apply Changes**.

##<a id="alerts"></a> Configure Forwarding for FIM Alerts

The FIM BOSH release writes all alerts to the syslogs of the VMs in your deployment.
You can use syslog forwarding to forward the alerts to a syslog aggregator.

* **Using the Pivotal Application Service (PAS) tile**:
Follow the steps to [Configure System Logging](http://docs.pivotal.io/pivotalcf/customizing/cloudform-er-config.html#sys-logging) 
in PAS. 
The syslog aggregator that you specify receives all alerts generated on PAS VMs, including the FIM alerts.
* **Using the BOSH syslog release**: You can use the syslog BOSH release to forward system logs. 
See the [syslog-release](https://github.com/cloudfoundry/syslog-release) for instructions.

<p class="note"><strong>Note</strong>: When you configure syslog forwarding, ensure there is enough disk space for the logs. 
Make sure that log rotation is frequent enough. If in doubt, rotate the logs hourly or when they reach a certain size. 
Pivotal recommends forwarding logs to a remote syslog aggregation system.</p>

## <a id="verify"></a>Verify the Installation

1. [BOSH SSH](https://docs.pivotal.io/pivotalcf/customizing/trouble-advanced.html#bosh-ssh) into one of the VMs in your deployment.

1. Run `monit summary`. Look for the following processes in the output:

    <pre class="terminal">The Monit daemon 5.2.4 uptime: 3d 0h 56m
    Process 'fim'                 running</pre>

1. If `monit summary` does not list `fim`, perform the following steps:
  1. Start the FIM processes by running the following commands:
  <pre class="terminal">
  $ monit start fim
  </pre>
  1. Run `monit summary` again. If you do not see the processes mentioned above, check `/var/vcap/sys/log/fim` logs for errors.

1. If `monit summary` does list `fim`, do the following:
  1. Enter the following commands:
    <pre class="terminal">$ touch /bin/hackertool
    $ grep hackertool /var/log/messages</pre>
  1. Look for a message that a new file has been created:
    <pre class="terminal">Sep 22 23:57:07 qvsfgv0qnrk filesnitch[3040]: CEF:0|cloud_foundry|fim|1.0.0|1|file integrity monitoring event|5| fname="/bin/hackertool" hostname="f98968fe-501a-470b-819a-c4a2a7ac45c8" opname="CREATE" optype=1 ts=1474588627</pre>


