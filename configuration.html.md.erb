---
title: Configuring the FIM Add-on for PCF
owner: Security Engineering
---

<strong><%= modified_date %></strong>

This topic describes how to configure and use the File Integrity Monitoring Add-on for PCF (FIM Add-on).

##<a id="dirs"></a>Listing Directories to be Monitored

The FIM Add-on monitors a set of critical system directories.
The list of directories to be monitored by the FIM Add-on can be configured using the `fim.dirs` property.
The default value of `fim.dirs` is:

```
fim:
  dirs:
    # System binaries and configuration
    - /bin
    - /etc
    - /lib
    - /lib64
    - /opt
    - /sbin
    - /srv
    - /usr
    - /var/lib

    # Bosh agent
    - /var/vcap/bosh
    - /var/vcap/monit/job

    # Bosh releases
    - /var/vcap/data/packages
    - /var/vcap/data/jobs
```

<p class="note"><strong>Note</strong>: The default <code>fim.dirs</code> are written for Ubuntu Trusty Stemcells. On Xenial Stemcells add <code>/lib32</code> to <code>fim.dirs</code>.</p>

##<a id="output"></a>Ignoring Events

Some monitored directories may contain files that should not be monitored, for example, files that change frequently.
You can configure the Fim Add-on to ignore events using path regexes with `fim.ignored_patterns`.
The default value of `fim.ignored_patterns` is:

```
fim:
  ignored_patterns:
    # Temporary files created when an operator or errand invoke `bosh ssh`
    - ^/etc/passwd.+$
    - ^/etc/shadow.+$
    - ^/etc/subgid.+$
    - ^/etc/subuid.+$
    - ^/etc/group.+$
    - ^/etc/gshadow.+$

    # Temporary files created when hosts updated
    - ^/etc/hosts.+$

    # Bosh Agent logs
    - ^/var/vcap/bosh/log/.+$

    # Log rotation
    - ^/var/lib/logrotate/status.*$
```

##<a id="output"></a>Low Severity Events

Some monitored directories may contain files that occasionally change.
You can configure The FIM Add-on to log events at a lower severity using path regexes with `fim.low_severity_patterns`.
The default value of `fim.low_severity_patterns` is:

```
fim:
  low_severity_patterns:
    # When an operator or errand invoke `bosh ssh` a new user is created
    - ^/etc/passwd$
    - ^/etc/shadow$
    - ^/etc/subgid$
    - ^/etc/subuid$
    - ^/etc/group$
    - ^/etc/gshadow$

    # Bosh-DNS sync and new VM creation update hosts
    - ^/etc/hosts$

    # DHCP leases
    - ^/var/lib/dhcp/dhclient.eth\d+.leases$

    # Bosh Agent configuration changes when VM created/modified
    - ^/var/vcap/bosh/settings.json$

    # Bosh Agent CHMODs jobs and packages as part of `bosh deployment`
    - ^/var/vcap/data/jobs$
    - ^/var/vcap/data/packages$
```

##<a id="output"></a>Configure the Output Destination

FIM supports three types of output:

* `stdout`: sends messages to `/var/vcap/sys/log/fim/fim.stdout.log`.
* `stderr`: sends messages to `/var/vcap/sys/log/fim/fim.stderr.log`.
* `syslog`: sends messages to `/var/log/messages`.

The output is configured using the `fim.outputs` property.

<p class="note"><strong>Note</strong>: Currently, FIM only supports selecting one output at a time.</p>

The default value of the `fim.outputs` property:

```
fim:
  outputs:
    - syslog
```

##<a id="format"></a>Configure the Output Format

By default, the FIM Add-on generates messages in the Common Event Format.
Output format can be configured as a Golang text template using the `fim.format` property.
The default value of `fim.format` is:

```
fim:
  format: "CEF:0|cloud_foundry|fim|1.0.0|{{.Optype}}|file integrity monitoring event|{{.Severity}}| {{.KeyValues}}"
```

This example output shows what log lines look like with the default `fim.format` configuration:

```
Apr 20 19:12:37 localhost filesnitch[819]: CEF:0|cloud_foundry|fim|1.0.0|0|file integrity monitoring event|3| fname="" hostname="diego_cell/8279dfa8-9f86-4bb1-8b92-65457d2ae989" opname="FILESNITCH_CHECKIN" optype=0 ts=1492715822
Apr 20 19:17:02 localhost filesnitch[819]: CEF:0|cloud_foundry|fim|1.0.0|1|file integrity monitoring event|5| fname="/etc/passwd.lock" hostname="diego_cell/8279dfa8-9f86-4bb1-8b92-65457d2ae989" opname="CREATE" optype=1 ts=1492715822
Apr 20 19:17:02 localhost filesnitch[819]: CEF:0|cloud_foundry|fim|1.0.0|4|file integrity monitoring event|5| fname="/etc/passwd.17721" hostname="diego_cell/8279dfa8-9f86-4bb1-8b92-65457d2ae989" opname="REMOVE" optype=4 ts=1492715822
Apr 20 19:17:02 localhost filesnitch[819]: CEF:0|cloud_foundry|fim|1.0.0|1|file integrity monitoring event|5| fname="/etc/group.lock" hostname="diego_cell/8279dfa8-9f86-4bb1-8b92-65457d2ae989" opname="CREATE" optype=1 ts=1492715822
Apr 20 19:17:02 localhost filesnitch[819]: CEF:0|cloud_foundry|fim|1.0.0|4|file integrity monitoring event|5| fname="/etc/group.17721" hostname="diego_cell/8279dfa8-9f86-4bb1-8b92-65457d2ae989" opname="REMOVE" optype=4 ts=1492715822
Apr 20 19:17:02 localhost filesnitch[819]: CEF:0|cloud_foundry|fim|1.0.0|1|file integrity monitoring event|5| fname="/etc/gshadow.lock" hostname="diego_cell/8279dfa8-9f86-4bb1-8b92-65457d2ae989" opname="CREATE" optype=1 ts=1492715822
```

<p class="note"><strong>Note</strong>: The <code>FILESNITCH CHECKIN</code> message is a logging marker that indicates <code>filesnitch</code> is operational in the absence of any filesystem events.</p>

The key-values pairs in the final field of a CEF file log carry the following meaning:

* `fname` is the name of the affected file.
* `hostname` is the hostname of the VM on which the file event originated.
* `ts` is the point in time at which FIM received the file event.
* `optype` and `opname` are the type of file operation in the numeric and textual format, respectively.
   The possible values of the two fields are described by the table below.

    | opname |      optype |  Example Trigger |
    |----------|:-------------:|------|
    | CREATE | 1 | <code>touch newfile.txt</code>, <code>echo 'content' > newfile2.txt</code>
    | WRITE | 2 |  <code>echo 'hello world' >> file.txt</code>
    | REMOVE | 4 | <code>rm file.txt</code>
    | RENAME | 8 | <code>mv file.txt file.txt.orig</code>
    | CHMOD | 16 | <code>chmod 0400 file.txt</code>, <code>touch existingfile.txt</code>

Other template values are listed below.
###<a id="json"></a>JSON
The `{{.Json}}` string serializes an event into a standard JSON dictionary.
Example:

```json
{"fname":"/bin/binary","hostname":"plymouth","opname":"CREATE","optype":1,"ts":1475195084}
```

###<a id="keyvalues"></a>Key-Values
The `{{.KeyValues}}` string serializes an event into a series of `key=value` fields.
Example:

```
fname="/bin/binary" hostname="plymouth" opname="CREATE" optype=1 ts=1475195258
```

###<a id="fields"></a>Individual Fields
| template | description |
|----------|-------------|
| `{{.Fname}}` | Name of the affected file |
| `{{.Hostname}}` | Hostname of the VM on which the file event originated |
| `{{.OpName}}` | Type of file operation in textual format |
| `{{.OpType}}` | Type of file operation in numeric format |
| `{{.Severity}}` | Level of importance attributed to the event |
| `{{.Ts}}` | Point in time at which FIM received the file event |
| `{{.Digests}}` | Key-value pairs of hash algorithms and the hash of the modified file |

For example, the following variable definition...

```
fim:
  format: "{{.Fname}} {{.Hostname}} {{.OpName}} {{.OpType}} {{.Digests}} {{.Ts}}"
```

...produces the following:

```
/bin/binary plymouth CREATE 1 sha256=da39a3ee5e6b4b0d3255bfef95601890afd80709 1475195574
```

##<a id="digests"></a>Calculate File Hashes

The FIM Add-on supports hashing monitored files on WRITE or CREATE events using the `sha256` algorithm. Hashing is disabled by default, and can be configured using the `fim.digests` property, as follows:


```
fim:
  digests:
    - sha256
```

###<a id="digest_threshold"></a>File Size Threshold

The FIM Add-on sets a threshold on the size of files to be hashed. Use the `fim.digest_threshold` property to adjust this threshold. The property takes a value in bytes. The default value is `10000000`.

```
fim:
  digest_threshold: 10000000
```


