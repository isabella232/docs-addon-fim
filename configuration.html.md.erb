---
title: Configuring the FIM Add-on for PCF
owner: Security Engineering
---

<strong><%= modified_date %></strong>

This topic describes how to configure and use the File Integrity Monitoring Add-on for PCF (FIM Add-on).

##<a id="dirs"></a>List Directories to be Monitored

The FIM Add-on monitors a set of critical system directories.
The list of directories to be monitored by the FIM Add-on can be configured using the `fim.dirs` property.

The default value of `fim.dirs` for Linux is:

    fim:
      dirs:
        # System binaries and configuration
        - /bin
        - /etc
        - /lib
        - /lib64
        - /opt
        - /sbin
        - /srv
        - /usr
        - /var/lib

        # Bosh agent
        - /var/vcap/bosh
        - /var/vcap/monit/job

        # Bosh releases
        - /var/vcap/data/packages
        - /var/vcap/data/jobs

<p class="note"><strong>Note</strong>: The default <code>fim.dirs</code> are written for Ubuntu Trusty stemcells. On Xenial stemcells, add <code>/lib32</code> to <code>fim.dirs</code>.</p>

The default value of `fim.dirs` for Windows is:

    fim:
        dirs:
        - C:\\Windows\\System32
        - C:\\Program Files
        - C:\\Program Files (x86)
        - C:\\var\\vcap\\bosh
        - C:\\var\\vcap\\data\\packages
        - C:\\var\\vcap\\data\\jobs

##<a id="output-logs"></a>Event Logging

The FIM Add-on logs events that occur.
These samples can be used to configure a Security Information and Event Management (SIEM)
system to verify regular activity and generate alerts for unauthorized changes to a file.

These logs appear in the following format:
<pre>
2019-01-02T15:54:01.350053+00:00 localhost filesnitch[5963]: CEF:0|cloud_foundry|fim|1.0.0|OPERATION-TYPE|file integrity monitoring event|SEVERITY| fname="ABSOLUTE-PATH" hostname="BOSH-VM" opname="OPERATION-NAME" optype=OPERATION-TYPE ts=TIMESTAMP severity=SEVERITY
</pre>

Where:

* `OPERATION-TYPE` and `OPERATION-NAME` are one of the following:
    * `1`, which is `CREATE`
    * `2`, which is `WRITE`
    * `4`, which is `REMOVE`
    * `8`, which is `RENAME`
    * `16`, which is `CHMOD`

* `SEVERITY` is one of the following severity levels:
    * `1`, which is used for heartbeats
    * `3`, which is used for low severity events
    * `5`, which is used for all other events

* `ABSOLUTE-PATH` is the absolute path to the file, for example `/directory/file`

* `BOSH-VM` is the BOSH VM name, for example `/directory/vm-name`

* `TIMESTAMP` is the timestamp in Unix epoch format.

For example:
<pre class="terminal">
2019-01-02T15:54:01.350053+00:00 localhost filesnitch[5963]: CEF:0|cloud_foundry|fim|1.0.0|1|file integrity monitoring event|3| fname="/test/file01" hostname="fim/a6fbc720-cfd1-47fc-a257-c211704924a6" opname="CREATE" optype=1 ts=1546535400 severity=3

2019-01-02T15:54:19.388257+00:00 localhost filesnitch[5963]: CEF:0|cloud_foundry|fim|1.0.0|2|file integrity monitoring event|5| fname="/test/file02" hostname="fim/a6fbc720-cfd1-47fc-a257-c211704924a6" opname="WRITE" optype=2 ts=1546535520 severity=5
</pre>

For an example of every type of FIM log message that can be configured, see [Examples of FIM Log Messages](./log-examples.html).

<p class="note"><strong>Note</strong>:
Low severity events can be used to filter out business-as-usual events.
This makes unexpected events easy to isolate by looking for severity <code>5</code>.
</p>

##<a id="output-ignore"></a>Ignore Events

Some monitored directories may contain files that should not be monitored, for example, files that change frequently.
You can configure the Fim Add-on to ignore events using path regexes with `fim.ignored_patterns`.
The default value of `fim.ignored_patterns` is:

```
fim:
  ignored_patterns:
    # Temporary files created when an operator or errand invoke `bosh ssh`
    - ^/etc/passwd.+$
    - ^/etc/shadow.+$
    - ^/etc/subgid.+$
    - ^/etc/subuid.+$
    - ^/etc/group.+$
    - ^/etc/gshadow.+$

    # Temporary files created when hosts updated
    - ^/etc/hosts.+$

    # Bosh Agent logs
    - ^/var/vcap/bosh/log/.+$

    # Log rotation
    - ^/var/lib/logrotate/status.*$
```

##<a id="output-low"></a>Low Severity Events

Some monitored directories may contain files that occasionally change.
You can configure The FIM Add-on to log events at a lower severity using path regexes with `fim.low_severity_patterns`.
The default value of `fim.low_severity_patterns` is:

```
fim:
  low_severity_patterns:
    # When an operator or errand invoke `bosh ssh` a new user is created
    - ^/etc/passwd$
    - ^/etc/shadow$
    - ^/etc/subgid$
    - ^/etc/subuid$
    - ^/etc/group$
    - ^/etc/gshadow$

    # Bosh-DNS sync and new VM creation update hosts
    - ^/etc/hosts$

    # Attached devices and cgroups
    - ^/etc/mtab$

    # DHCP leases
    - ^/var/lib/dhcp/dhclient.eth\d+.leases$

    # Bosh Agent configuration changes when VM created/modified
    - ^/var/vcap/bosh/settings.json$

    # Bosh Agent CHMODs jobs and packages as part of `bosh deployment`
    - ^/var/vcap/data/jobs$
    - ^/var/vcap/data/packages$
```

##<a id="output-configure"></a>Configure the Output Destination

The output is configured using the `fim.outputs` property.

1. FIM supports three types of output for Linux:

  * `stdout`: sends messages to `/var/vcap/sys/log/fim/fim.stdout.log`.
  * `stderr`: sends messages to `/var/vcap/sys/log/fim/fim.stderr.log`.
  * `syslog`: sends messages to `/var/log/messages`.

  <p class="note"><strong>Note</strong>: Currently, FIM only supports selecting one output at a time.</p>

  The default value of the `fim.outputs` property:

  ```
  fim:
    outputs:
    - syslog
  ```
1. FIM supports two types of output for Windows:

* `stdout`: sends messages to `C:\\var\\vcap\\sys\\log\\fim-windows\\filesnitch\\job-service-wrapper.out.log`.
* `stderr`: sends messages to `C:\\var\\vcap\\sys\\log\\fim-windows\\filesnitch\\job-service-wrapper.err.log`.

The default value of the `fim.outputs` property:
```
fim:
  outputs:
  - stdout
```
##<a id="format"></a>Configure the Output Format

By default, the FIM Add-on generates messages in the Common Event Format.
Output format can be configured as a Golang text template using the `fim.format` property.
The default value of `fim.format` is:

```
fim:
  format: "CEF:0|cloud_foundry|fim|1.0.0|{{.Optype}}|file integrity monitoring event|{{.Severity}}| {{.KeyValues}}"
```

This example output shows what log lines look like with the default `fim.format` configuration:

```
Apr 20 19:12:37 localhost filesnitch[819]: CEF:0|cloud_foundry|fim|1.0.0|0|file integrity monitoring event|3| fname="" hostname="diego_cell/8279dfa8-9f86-4bb1-8b92-65457d2ae989" opname="FILESNITCH_CHECKIN" optype=0 ts=1492715822
Apr 20 19:17:02 localhost filesnitch[819]: CEF:0|cloud_foundry|fim|1.0.0|1|file integrity monitoring event|5| fname="/etc/passwd.lock" hostname="diego_cell/8279dfa8-9f86-4bb1-8b92-65457d2ae989" opname="CREATE" optype=1 ts=1492715822
Apr 20 19:17:02 localhost filesnitch[819]: CEF:0|cloud_foundry|fim|1.0.0|4|file integrity monitoring event|5| fname="/etc/passwd.17721" hostname="diego_cell/8279dfa8-9f86-4bb1-8b92-65457d2ae989" opname="REMOVE" optype=4 ts=1492715822
Apr 20 19:17:02 localhost filesnitch[819]: CEF:0|cloud_foundry|fim|1.0.0|1|file integrity monitoring event|5| fname="/etc/group.lock" hostname="diego_cell/8279dfa8-9f86-4bb1-8b92-65457d2ae989" opname="CREATE" optype=1 ts=1492715822
Apr 20 19:17:02 localhost filesnitch[819]: CEF:0|cloud_foundry|fim|1.0.0|4|file integrity monitoring event|5| fname="/etc/group.17721" hostname="diego_cell/8279dfa8-9f86-4bb1-8b92-65457d2ae989" opname="REMOVE" optype=4 ts=1492715822
Apr 20 19:17:02 localhost filesnitch[819]: CEF:0|cloud_foundry|fim|1.0.0|1|file integrity monitoring event|5| fname="/etc/gshadow.lock" hostname="diego_cell/8279dfa8-9f86-4bb1-8b92-65457d2ae989" opname="CREATE" optype=1 ts=1492715822
```

<p class="note"><strong>Note</strong>: The <code>FILESNITCH CHECKIN</code> message is a logging marker that indicates <code>filesnitch</code> is operational in the absence of any filesystem events.</p>

The key-values pairs in the final field of a CEF file log carry the following meaning:

* `fname` is the name of the affected file.
* `hostname` is the hostname of the VM on which the file event originated.
* `ts` is the point in time at which FIM received the file event.
* `optype` and `opname` are the type of file operation in the numeric and textual format, respectively.
   The possible values of the two fields are described by the table below:

    <table class="nice">
        <th>opname</th>
        <th>optype</th>
        <th>Example Linux Trigger</th>
        <th>Example Windows Trigger</th>
        <tr>
            <td>CREATE</td>
            <td align="center">1</td>
            <td><code>touch newfile.txt</code>, <code>echo 'content' > newfile2.txt</code></td>
            <td><code>Powershell New-Item -type File newfile.txt</code>, <code>Powershell Add-Content -Path newfile.txt -Value 'content'</code></td>
        </tr>
        <tr>
            <td>WRITE</td>
            <td align="center">2</td>
            <td><code>echo 'hello world' >> file.txt</code></td>
            <td><code>Powershell Add-Content -Path newfile.txt -Value 'content'</code></td>
        </tr>
        <tr>
            <td>REMOVE</td>
            <td align="center">4</td>
            <td><code>rm file.txt</code></td>
            <td><code>Powershell rm file.txt</code></td>
        </tr>
        <tr>
            <td>RENAME</td>
            <td align="center">8</td>
            <td><code>mv file.txt file.txt.orig</code></td>
            <td><code>Powershell mv file.txt file.txt.orig</code></td>
        </tr>
        <tr>
            <td>CHMOD</td>
            <td align="center">16</td>
            <td><code>chmod 0400 file.txt</code>, <code>touch existingfile.txt</code></td>
            <td><code>Powershell icacls file.txt /grant administrators:F</code></td>
        </tr>
    </table>


<p class="note"><strong>Note: </strong>FIM Add-on on Windows reports <code>WRITE</code> and <code>CHMOD</code> together as <code>WRITE|CHMOD</code>. The two operations are indistinguishable.</p>

Other template values are listed below.
###<a id="json"></a>JSON
The `{{.Json}}` string serializes an event into a standard JSON dictionary.
Example:

```json
{"fname":"/bin/binary","hostname":"plymouth","opname":"CREATE","optype":1,"ts":1475195084}
```

###<a id="keyvalues"></a>Key-Values
The `{{.KeyValues}}` string serializes an event into a series of `key=value` fields.
Example:

```
fname="/bin/binary" hostname="plymouth" opname="CREATE" optype=1 ts=1475195258
```

###<a id="fields"></a>Individual Fields
| template | description |
|----------|-------------|
| `{{.Fname}}` | Name of the affected file |
| `{{.Hostname}}` | Hostname of the VM on which the file event originated |
| `{{.OpName}}` | Type of file operation in textual format |
| `{{.OpType}}` | Type of file operation in numeric format |
| `{{.Severity}}` | Level of importance attributed to the event |
| `{{.Ts}}` | Point in time at which FIM received the file event |
| `{{.Digests}}` | Key-value pairs of hash algorithms and the hash of the modified file |

For example, the following variable definition...

```
fim:
  format: "{{.Fname}} {{.Hostname}} {{.OpName}} {{.OpType}} {{.Digests}} {{.Ts}}"
```

...produces the following:

```
/bin/binary plymouth CREATE 1 sha256=da39a3ee5e6b4b0d3255bfef95601890afd80709 1475195574
```

##<a id="digests"></a>Calculate File Hashes

The FIM Add-on supports hashing monitored files on WRITE or CREATE events using the `sha256` algorithm. Hashing is disabled by default, and can be configured using the `fim.digests` property, as follows:


```
fim:
  digests:
    - sha256
```

###<a id="digest_threshold"></a>File Size Threshold

The FIM Add-on sets a threshold on the size of files to be hashed. Use the `fim.digest_threshold` property to adjust this threshold. The property takes a value in bytes. The default value is `10000000`.

```
fim:
  digest_threshold: 10000000
```


##<a id="monitor-containers"></a>Monitor Containers with FIM

You can use FIM to monitor the following:

+ Garden containers on the Diego Cell VMs in <%= vars.app_runtime_full %> (<%= vars.app_runtime_abbr %>)

+ Containers on the Diego Windows Cell VMs in <%= vars.windows_runtime_full %> (<%= vars.windows_runtime_abbr %>)

+ Containers on the Kubernetes worker node VMs in <%= vars.k8s_runtime_full %> (<%= vars.k8s_runtime_abbr %>)

###<a id="garden"></a> Monitor Garden Containers

To configure FIM to monitor Garden containers, do the following when configuring FIM:

1. In [List Directories to Be Monitored](#dirs) above, add the following directories
   to the `fim.dirs` property:

        fim:
          dirs:
            ...

            # Garden containers
            - /var/vcap/data/grootfs/store/unprivileged/images/
            - /var/vcap/data/grootfs/store/privileged/images/

    For more information about GrootFS volumes,
    see [Volumes](https://docs.pivotal.io/pivotalcf/concepts/grootfs-disk.html#volumes).

2. In [Ignore Events](#output-ignore), add the following pattern to the `ignored_patterns` property:

        fim:
          ignored_patterns:
            ...
            # When monitoring Garden containers,
            # ignore duplicate log messages sent to .../UUID/rootfs/
            - ^/var/vcap/data/grootfs/store/(un)?privileged/images/[\w-]+/rootfs/.*$

    <p class="note"><strong>Note:</strong> When files in the Garden containers are modified,
      changes are made to both the <code>diff</code> and <code>rootfs</code> directories.
    Adding this ignore pattern means that files and directories
    in the <code>/var/vcap/data/grootfs/store/unprivileged/images/UUID/diff</code>
    directory are ignored by FIM. <code>UUID</code> is the ID of the container.</p>

For an example log message, see [Examples of Log Messages from Containers](./log-examples.html#container-examples).


###<a id="pasw"></a> Monitor Containers in Pivotal Application Service for Windows

To configure FIM to monitor containers:
1. In [List Directories to Be Monitored](#dirs) above, add the following directories
   to the `fim.dirs` property:

        fim:
          dirs:
            ...
            - C:\\var\\vcap\\data\\groot

###<a id="pks"></a> Monitor Containers in Enterprise PKS

To configure FIM to monitor containers on the Kubernetes worker node VMs in Enterprise PKS:

1. In [List Directories to Be Monitored](#dirs) above, add the following directory to the `fim.dirs` property:

        fim:
          dirs:
            ...

            # Containers in Enterprise PKS
            - /var/vcap/store/docker/docker/

    When files and directories in the `/var/vcap/store/docker/docker/overlay2/UUID/diff` directory
    are created, removed, or modified, FIM writes log messages.
    `UUID` is the ID of the container.

For an example log message, see [Examples of Log Messages from Containers](./log-examples.html#container-examples).
